version: '3.8'

services:
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    command: --cleanup --interval 300 # Check for updates every 5 minutes and remove old containers

  traefik:
    image: traefik:v2.5
    command:
      - "--api.insecure=true" # Optional, allows Traefik to show its dashboard at :8080
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80" # HTTP entry point
      - "--entrypoints.websecure.address=:443"  # HTTPS entry point (for SSL)
    ports:
      - "80:80"   # HTTP
      - "443:443" # HTTPS
      - "8080:8080" # Traefik dashboard exposed
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock" # Enables Traefik to access Docker services
    networks:
      - reservationproject

  php:  # PHP-FPM Service
    image: devblaze/reservationproject:latest
    volumes:
      - .:/var/www/html            # Sync code (host -> container)
      - ./public:/var/www/html/public  # Make sure public assets are properly mounted
    networks:
      - reservationproject
    expose:
      - 9000  # Expose PHP-FPM's FastCGI port to Traefik (which communicates via FastCGI)
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.laravel.rule=Host(`c110-129-222-69-83.ngrok-free.app`)"  # Your domain or ngrok
      - "traefik.http.routers.laravel.entrypoints=web"
      - "traefik.http.services.laravel.loadbalancer.server.port=9000"  # FastCGI port inside the container
    deploy:
      replicas: 1  # If you're testing/demo purposes, you don't really need 3 replicas.

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: reservationprojectv2
      MYSQL_USER: sail
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
    volumes:
      - mysql:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - reservationproject

  meilisearch:
    image: getmeili/meilisearch:latest
    environment:
      MEILI_ENV: production
    ports:
      - "7700:7700"  # Expose port 7700 for Meilisearch
    volumes:
      - meilisearch:/meili_data  # Persist data between restarts
    networks:
      - reservationproject
    deploy:
      replicas: 1  # Scale up if needed

networks:
  reservationproject:
    driver: bridge

volumes:
  mysql:
    driver: local
  meilisearch:
    driver: local
