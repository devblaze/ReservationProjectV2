version: '3.8'
services:
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    command: --cleanup --interval 300 # Check for updates every 5 minutes and remove old containers
  traefik:
    image: traefik:v2.5
    command:
      - "--api.insecure=true" # Optional, allows Traefik to show its dashboard at :8080
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80" # HTTP entry point
    ports:
      - "80:80"   # Expose Traefik on port 80 for HTTP
      - "8080:8080" # Optional, expose Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock" # Enables Traefik to access Docker services
    networks:
      - sail

  laravel.test:
    image: sail-8.2/app
    environment:
      APP_ENV: production
      APP_DEBUG: 0
      # Other production environment variables
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.laravel.rule=Host(`thessaloniki.duckdns.org`)" # Replace with your domain
      - "traefik.http.services.laravel.loadbalancer.server.port=80" # Internal port used by the service
    networks:
      - sail
    deploy:
      replicas: 3  # Run three instances for load balancing and high availability
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
    volumes:
      - 'sail-mysql:/var/lib/mysql'
    networks:
      - sail

  meilisearch:
    image: getmeili/meilisearch:latest
    environment:
      MEILI_ENV: production
    ports:
      - "7700:7700"  # Expose port 7700 for Meilisearch
    volumes:
      - meili_data:/meili_data  # Persist data between restarts
    networks:
      - sail
    deploy:
      replicas: 1  # You can scale if needed
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

networks:
  sail:
    driver: bridge

volumes:
  sail-mysql:
    driver: local
